package com.torre.proyectofinal.screen

import android.annotation.SuppressLint
import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import coil.compose.AsyncImage
import coil.compose.rememberAsyncImagePainter
import coil.compose.rememberImagePainter
import com.torre.proyectofinal.R
import com.torre.proyectofinal.data.api.PexelsImage
import com.torre.proyectofinal.viewmodel.MainViewModel
import kotlinx.coroutines.delay


@OptIn(ExperimentalMaterial3Api::class)
@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
@Composable
fun RegistroScreen(navController: NavController, userViewModel: MainViewModel,  mainViewModel: MainViewModel) {
    // Variables para almacenar los valores del nombre y correo electr√≥nico ingresados
    var name by remember { mutableStateOf("") }
    var email by remember { mutableStateOf("") }

    // Estado para controlar la visibilidad del Dialog
    var showDialog by remember { mutableStateOf(false) }

    // Cargar la imagen (aseg√∫rate de que la imagen est√© en la carpeta drawable)
    val image: Painter = painterResource(id = com.torre.proyectofinal.R.drawable.usuario_)


    // Cargar im√°genes de la API de Pexels
    val pexelsImages by mainViewModel.pexelsImages.collectAsState()

    // Llamada a la API para obtener im√°genes aleatorias
    LaunchedEffect(Unit) {
        mainViewModel.getRandomImages("nature")  // Aqu√≠ llamamos a la funci√≥n para obtener las im√°genes aleatorias
    }
   // Depuraci√≥n: Verificar si las im√°genes est√°n llegando correctamente
   // LaunchedEffect(pexelsImages) {
   //     println("Im√°genes obtenidas: ${pexelsImages?.photos}")
   // }

    // Dise√±o de la pantalla
    Box(
        modifier = Modifier.fillMaxSize()
    ) {
        // Imagen de fondo
        Image(
            painter = painterResource(id = R.drawable.registro),  // Aqu√≠ es donde cargas el recurso de la imagen
            contentDescription = "Fondo de pantalla",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop // Para que la imagen cubra toda la pantalla
        )

        // Contenido de la pantalla (sobre la imagen)
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {

            // Espaciado desde la parte superior
            Spacer(modifier = Modifier.height(50.dp)) // Espacio de 50dp desde la parte superior

            // T√≠tulo de la pantalla
            Text(
                text = "Datos para Registrarse",
                fontSize = 32.sp,  // Aumentado el tama√±o de la fuente
                color = Color.White,  // Establecer el color de la letra a blanco
                modifier = Modifier.padding(bottom = 16.dp)
            )

            // Espacio entre el t√≠tulo y la imagen
            Spacer(modifier = Modifier.height(25.dp))  // A√±adido espacio entre el t√≠tulo y la imagen

            // Imagen debajo del t√≠tulo
            Image(
                painter = image,
                contentDescription = "Imagen de registro",
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp)
            )

            // Espacio entre el t√≠tulo y la imagen
            Spacer(modifier = Modifier.height(25.dp))  // A√±adido espacio entre el t√≠tulo y la imagen

            // Campo de texto para ingresar el nombre
            TextField(
                value = name,
                onValueChange = { name = it },
                label = { Text(" \uD83D\uDC64 Nombre", color = Color.White) },
                modifier = Modifier.fillMaxWidth(),
                colors = TextFieldDefaults.textFieldColors(
                    containerColor = Color.Transparent,  // Fondo transparente
                    focusedIndicatorColor = Color.White,  // Color del indicador cuando est√° enfocado
                    unfocusedIndicatorColor = Color.White  // Color del indicador cuando no est√° enfocado
                )
            )
            Spacer(modifier = Modifier.height(8.dp))

            // Campo de texto para ingresar el correo electr√≥nico
            TextField(
                value = email,
                onValueChange = { email = it },
                label = { Text(" \uD83D\uDCE7\u200B Correo Electr√≥nico", color = Color.White) },
                modifier = Modifier.fillMaxWidth(),
                colors = TextFieldDefaults.textFieldColors(
                    containerColor = Color.Transparent,  // Fondo transparente
                    focusedIndicatorColor = Color.White,  // Color del indicador cuando est√° enfocado
                    unfocusedIndicatorColor = Color.White  // Color del indicador cuando no est√° enfocado
                )
            )
            Spacer(modifier = Modifier.height(16.dp))

            // Llamamos al InfiniteImageCarousel para crear el hilo de im√°genes
            if (pexelsImages != null && pexelsImages?.photos?.isNotEmpty() == true) {
                // Aqu√≠ pasamos las im√°genes obtenidas de la API de Pexels al "hilo" de im√°genes
                InfiniteImageCarousel(photo = pexelsImages?.photos ?: emptyList())
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Espaciado flexible para empujar el bot√≥n hacia abajo
            Spacer(modifier = Modifier.weight(1f))

            // Bot√≥n para registrar al usuario
            Button(
                onClick = {
                    if (name.isNotBlank() && email.isNotBlank()) {
                        // Guardar el usuario en la base de datos usando el ViewModel
                        userViewModel.addUser(name, email)
                        userViewModel.incrementAccessCount(email)  // üî• Asegurar que el contador sube
                        // Mostrar el Dialog de confirmaci√≥n
                        showDialog = true
                    } else {
                        Toast.makeText(
                            navController.context,
                            "Por favor, ingrese todos los datos",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                },
                modifier = Modifier
                    .fillMaxWidth() // Hace el bot√≥n de ancho completo
                    .height(56.dp) // Aumenta la altura del bot√≥n
            ) {
                Text("Registrar", fontSize = 18.sp)
            }

            // Espaciado debajo del bot√≥n para separarlo de la parte inferior
            Spacer(modifier = Modifier.height(24.dp)) // A√±adido espacio debajo del bot√≥n
        }

        // Mostrar el Dialog en el centro de la pantalla despu√©s de registrar
        if (showDialog) {
            // LaunchedEffect para hacer que el Dialog desaparezca despu√©s de un retraso
            LaunchedEffect(Unit) {
                delay(2000)  // Esperar 2 segundos (puedes ajustar este valor)
                showDialog = false  // Cerrar el Dialog
                navController.popBackStack()  // Regresar a la pantalla de inicio
            }

            AlertDialog(
                onDismissRequest = { showDialog = false },
                title = { Text(" ‚úÖ Registro exitoso") },
                text = { Text("El usuario ha sido registrado correctamente.") },
                confirmButton = {}  // Sin bot√≥n, solo muestra el mensaje y lo quita despu√©s de 2 segundos
            )
        }


    }
}
    @Composable
    fun InfiniteImageCarousel(photo: List<PexelsImage>) {
        val infiniteImages = remember { mutableStateListOf<PexelsImage>().apply { addAll(photo) } }


        LaunchedEffect(Unit) {
            while (true) {
                delay(3000) // Esperar 3 segundos
                if (infiniteImages.isNotEmpty()) {
                    infiniteImages.add(infiniteImages.first()) // Agregar la primera imagen al final
                    infiniteImages.removeAt(0)  // Eliminar la primera imagen
                }
            }
        }

        // Mostrar las im√°genes de Pexels
        LazyRow(
            modifier = Modifier
                .fillMaxWidth()
                .height(200.dp)
                .padding(horizontal = 16.dp),
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            items(infiniteImages) { image ->  // ‚úÖ Usamos `infiniteImages`
                AsyncImage(
                    model = image.src.medium,  // ‚úÖ Correcto acceso a la imagen
                    contentDescription = "Imagen de Pexels",
                    modifier = Modifier.fillMaxHeight(),
                    contentScale = ContentScale.Crop
                )
            }
        }

}

